"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[635],{6667:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=o(3438),t=o(5627);const r={sidebar_position:1},l="Create an Application With Monomer",a={id:"build/create-an-app-with-monomer",title:"Create an Application With Monomer",description:"In this tutorial, you will learn how to create a new Monomer application with",source:"@site/docs/build/create-an-app-with-monomer.md",sourceDirName:"build",slug:"/build/create-an-app-with-monomer",permalink:"/build/create-an-app-with-monomer",draft:!1,unlisted:!1,editUrl:"https://github.com/polymerdao/monomer/tree/main/doc/docs/build/create-an-app-with-monomer.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Build",permalink:"/category/build"}},s={},d=[{value:"Setup",id:"setup",level:2},{value:"Bootstrapping a Cosmos SDK Application",id:"bootstrapping-a-cosmos-sdk-application",level:3},{value:"Integrating Monomer",id:"integrating-monomer",level:2},{value:"Import <code>x/rollup</code> and <code>x/testmodule</code>",id:"import-xrollup-and-xtestmodule",level:3},{value:"Setting the Store Keys",id:"setting-the-store-keys",level:3},{value:"Genesis Module Order",id:"genesis-module-order",level:3},{value:"Initializing the Modules",id:"initializing-the-modules",level:3},{value:"Defining the Monomer Command",id:"defining-the-monomer-command",level:3},{value:"Building the Application",id:"building-the-application",level:2},{value:"Configuring the Application",id:"configuring-the-application",level:2},{value:"Running the Application",id:"running-the-application",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"create-an-application-with-monomer",children:"Create an Application With Monomer"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, you will learn how to create a new Monomer application with\na Cosmos SDK ",(0,i.jsx)(n.a,{href:"https://docs.cosmos.network/main/learn/intro/sdk-design#baseapp",children:"simapp"})," (or, ",(0,i.jsx)(n.code,{children:"baseapp"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"Monomer is a framework for deploying Cosmos SDK applications as rollups on\nEthereum. As such, the development environment for Monomer is similar to that of\na Cosmos SDK application. To begin building an application with Monomer, we can\nstart with a basic Cosmos SDK app."}),"\n",(0,i.jsxs)(n.p,{children:["We'll use the handy tool ",(0,i.jsx)(n.a,{href:"https://github.com/rollchains/spawn",children:"spawn"})," to bootstrap a new Cosmos SDK application. If you do not already have it, follow the instructions below to install it."]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsxs)("summary",{children:["Install ",(0,i.jsx)(n.code,{children:"spawn"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/rollchains/spawn\ncd spawn\ngit checkout v0.50.5\nmake install\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"bootstrapping-a-cosmos-sdk-application",children:"Bootstrapping a Cosmos SDK Application"}),"\n",(0,i.jsxs)(n.p,{children:["We can spawn a new Cosmos SDK application with ",(0,i.jsx)(n.code,{children:"spawn new"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"spawn new rollchain --consensus=proof-of-authority \\\n    --bech32=roll \\\n    --denom=uroll \\\n    --bin=rolld \\\n    --disabled=cosmwasm,globalfee,block-explorer \\\n    --org=monomer\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This gives us a boilerplate Cosmos SDK application in the ",(0,i.jsx)(n.code,{children:"rollchain"}),"\ndirectory."]}),"\n",(0,i.jsx)(n.h2,{id:"integrating-monomer",children:"Integrating Monomer"}),"\n",(0,i.jsxs)(n.p,{children:["Let's move into the ",(0,i.jsx)(n.code,{children:"rollchain"})," directory and add Monomer to our application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd rollchain\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"import-xrollup-and-xtestmodule",children:["Import ",(0,i.jsx)(n.code,{children:"x/rollup"})," and ",(0,i.jsx)(n.code,{children:"x/testmodule"})]}),"\n",(0,i.jsxs)(n.p,{children:["Now we can import ",(0,i.jsx)(n.a,{href:"/learn/the-rollup-module",children:(0,i.jsx)(n.code,{children:"x/rollup"})})," in ",(0,i.jsx)(n.code,{children:"app/app.go"}),". While we're at it, let's also import ",(0,i.jsx)(n.code,{children:"x/testmodule"})," (this\nwill ",(0,i.jsx)(n.a,{href:"https://github.com/polymerdao/monomer/blob/c98eccb49bf857829cadee899359e60fc36e6745/testapp/x/testmodule/module.go#L82",children:"initialize a non-empty validator set"})," for us so we don't have to do it manually). When you're ready to deploy your application, you can remove ",(0,i.jsx)(n.code,{children:"x/testmodule"})," and configure your own validator set. Add the following packages to the import statement in ",(0,i.jsx)(n.code,{children:"app/app.go"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n    // ...\n    "sync"\n\n    "github.com/polymerdao/monomer/x/rollup"                                     // <-- add this line\n    rolluptypes "github.com/polymerdao/monomer/x/rollup/types"                   // <-- add this line\n    rollupkeeper "github.com/polymerdao/monomer/x/rollup/keeper"                 // <-- add this line\n    "github.com/polymerdao/monomer/testapp/x/testmodule"                         // <-- add this line\n    testmodulekeeper "github.com/polymerdao/monomer/testapp/x/testmodule/keeper" // <-- add this line\n    // ...\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["and run ",(0,i.jsx)(n.code,{children:"go mod tidy"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"There are a few modifications we need to make to the boilerplate Cosmos SDK app.\nNamely, we need to"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Initialize the module's store keys"}),"\n",(0,i.jsx)(n.li,{children:"Add the module to the genesis module order"}),"\n",(0,i.jsxs)(n.li,{children:["Initialize the module in ",(0,i.jsx)(n.code,{children:"app/app.go"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's walk through these changes."}),"\n",(0,i.jsx)(n.h3,{id:"setting-the-store-keys",children:"Setting the Store Keys"}),"\n",(0,i.jsxs)(n.p,{children:["Look for the block that initializes the KV store keys, and add the store key for ",(0,i.jsx)(n.code,{children:"x/rollup"})," and ",(0,i.jsx)(n.code,{children:"x/testmodule"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// app/app.go\n\nfunc NewChainApp(\n  logger log.Logger,\n  db dbm.DB,\n  traceStore io.Writer,\n  loadLatest bool,\n  appOpts servertypes.AppOptions,\n  baseAppOptions ...func(*baseapp.BaseApp),\n) *ChainApp {\n    // ...\n    keys := storetypes.NewKVStoreKeys(\n        // ...\n        ratelimittypes.StoreKey,\n        // Monomer\n        rolluptypes.StoreKey, // <-- add this line\n        testmodule.StoreKey,  // <-- add this line\n    )\n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"genesis-module-order",children:"Genesis Module Order"}),"\n",(0,i.jsxs)(n.p,{children:["Next, add ",(0,i.jsx)(n.code,{children:"x/rollup"})," and ",(0,i.jsx)(n.code,{children:"x/testmodule"})," to the genesis module order.\nHere we place them at the end of the list:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// app/app.go\n\ngenesisModuleOrder := []string{\n    // ...\n    wasmlctypes.ModuleName,\n    ratelimittypes.ModuleName,\n    // Monomer\n    rolluptypes.ModuleName, // <-- add this line\n    testmodule.ModuleName,  // <-- add this line\n    // this line is used by starport scaffolding # stargate/app/initGenesis\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"initializing-the-modules",children:"Initializing the Modules"}),"\n",(0,i.jsxs)(n.p,{children:["Now let's initialize the modules with their respective keepers. Add the\nfollowing block to the ",(0,i.jsx)(n.code,{children:"NewChainApp"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// app/app.go\n\n// ...\nratelimit.NewAppModule(appCodec, app.RateLimitKeeper),\n// Monomer\nrollup.NewAppModule( // <-- add this block\n    appCodec,\n    rollupkeeper.NewKeeper(\n        appCodec,\n        runtime.NewKVStoreService(keys[rolluptypes.StoreKey]),\n        app.BankKeeper,\n    ),\n),\ntestmodule.New(testmodulekeeper.New(runtime.NewKVStoreService(keys[testmodule.StoreKey]))),\n"})}),"\n",(0,i.jsxs)(n.p,{children:["That's it for ",(0,i.jsx)(n.code,{children:"app.go"}),"! Next we'll add a CLI command to interact with Monomer."]}),"\n",(0,i.jsx)(n.h3,{id:"defining-the-monomer-command",children:"Defining the Monomer Command"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"cmd/rolld/commands.go"}),", import ",(0,i.jsx)(n.code,{children:"github.com/polymerdao/monomer/integrations"})," and add the following block to the ",(0,i.jsx)(n.code,{children:"initRootCmd"}),"\nfunction. This defines the ",(0,i.jsx)(n.code,{children:"monomer"})," command which utilizes our custom start\ncommand hook that handles the integration between Monomer and the Cosmos SDK:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// cmd/rolld/commands.go\n\nimport (\n    // ...\n    "github.com/polymerdao/monomer/integrations" // <-- add this line, run `go mod tidy`\n    // ...\n)\n\nfunc initRootCmd(\n  rootCmd *cobra.Command,\n  txConfig client.TxConfig,\n  interfaceRegistry codectypes.InterfaceRegistry,\n  appCodec codec.Codec,\n  basicManager module.BasicManager,\n) {\n  // ...\n\n  // Remove or comment out the following line:\n  /* server.AddCommands(rootCmd, app.DefaultNodeHome, newApp, appExport, addModuleInitFlags) */\n\n  // --- Add this block ---\n  monomerCmd := &cobra.Command{\n\tUse:     "monomer",\n\tAliases: []string{"comet", "cometbft", "tendermint"},\n\tShort:   "Monomer subcommands",\n  }\n  monomerCmd.AddCommand(server.StartCmdWithOptions(newApp, app.DefaultNodeHome, server.StartCmdOptions{\n    StartCommandHandler: integrations.StartCommandHandler,\n  }))\n  rootCmd.AddCommand(monomerCmd)\n  // --- End block ---\n\n  // ...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"building-the-application",children:"Building the Application"}),"\n",(0,i.jsxs)(n.p,{children:["To resolve some breaking changes in minor versions, we need the following replace directives. Add them to ",(0,i.jsx)(n.code,{children:"go.mod"}),", then run ",(0,i.jsx)(n.code,{children:"go mod tidy"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"github.com/ethereum/go-ethereum => github.com/joshklop/op-geth v0.0.0-20240515205036-e3b990384a74\ngithub.com/libp2p/go-libp2p => github.com/joshklop/go-libp2p v0.0.0-20240814165419-c6b91fa9f263\ngithub.com/btcsuite/btcd/btcec/v2 v2.3.4 => github.com/btcsuite/btcd/btcec/v2 v2.3.2\ngithub.com/crate-crypto/go-kzg-4844 v1.0.0 => github.com/crate-crypto/go-kzg-4844 v0.7.0\ngithub.com/crate-crypto/go-ipa => github.com/crate-crypto/go-ipa v0.0.0-20231205143816-408dbffb2041\n"})}),"\n",(0,i.jsxs)(n.p,{children:["and change the ",(0,i.jsx)(n.code,{children:"cosmossdk.io/core"})," replace directive to ",(0,i.jsx)(n.code,{children:"v0.11.1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cosmossdk.io/core => cosmossdk.io/core v0.11.1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now we can build our application by running"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["from the root of the\n",(0,i.jsx)(n.code,{children:"rollchain/"})," directory. This will install our chain binary, ",(0,i.jsx)(n.code,{children:"rolld"}),", to the\n",(0,i.jsx)(n.code,{children:"$GOBIN"})," directory."]}),"\n",(0,i.jsx)(n.h2,{id:"configuring-the-application",children:"Configuring the Application"}),"\n",(0,i.jsx)(n.p,{children:"There's one last step before we can run our application: We need to write\nits genesis file. We can generate one by running"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"rolld init my-monomer-app --chain-id=1\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["Make sure to use a numeric chain ID. Monomer will fail to start if the chain ID\ncannot be parsed as a ",(0,i.jsx)(n.code,{children:"uint64"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["This will create a new directory in ",(0,i.jsx)(n.code,{children:"~/.rollchain"})," with the necessary application configuration files in ",(0,i.jsx)(n.code,{children:"~/.rollchain/config"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"running-the-application",children:"Running the Application"}),"\n",(0,i.jsx)(n.p,{children:"Now that our application is configured, we can start the Monomer application by\nrunning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"rolld monomer start\n"})}),"\n",(0,i.jsx)(n.p,{children:"Congratulations! You've successfully integrated Monomer into your Cosmos SDK\napplication."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5627:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var i=o(3790);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);